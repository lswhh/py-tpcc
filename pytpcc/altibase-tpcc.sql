CREATE TABLE WAREHOUSE (
  W_ID SMALLINT DEFAULT '0' NOT NULL,
  W_NAME VARCHAR(16) DEFAULT NULL,
  W_STREET_1 VARCHAR(32) DEFAULT NULL,
  W_STREET_2 VARCHAR(32) DEFAULT NULL,
  W_CITY VARCHAR(32) DEFAULT NULL,
  W_STATE VARCHAR(2) DEFAULT NULL,
  W_ZIP VARCHAR(9) DEFAULT NULL,
  W_TAX FLOAT DEFAULT NULL,
  W_YTD FLOAT DEFAULT NULL,
  CONSTRAINT W_PK_ARRAY PRIMARY KEY (W_ID)
);

CREATE TABLE DISTRICT (
  D_ID INTEGER DEFAULT '0' NOT NULL,
  D_W_ID SMALLINT DEFAULT '0' NOT NULL,
  D_NAME VARCHAR(16) DEFAULT NULL,
  D_STREET_1 VARCHAR(32) DEFAULT NULL,
  D_STREET_2 VARCHAR(32) DEFAULT NULL,
  D_CITY VARCHAR(32) DEFAULT NULL,
  D_STATE VARCHAR(2) DEFAULT NULL,
  D_ZIP VARCHAR(9) DEFAULT NULL,
  D_TAX FLOAT DEFAULT NULL,
  D_YTD FLOAT DEFAULT NULL,
  D_NEXT_O_ID INT DEFAULT NULL,
  PRIMARY KEY (D_W_ID,D_ID)
);

CREATE TABLE ITEM (
  I_ID INTEGER DEFAULT '0' NOT NULL,
  I_IM_ID INTEGER DEFAULT NULL,
  I_NAME VARCHAR(32) DEFAULT NULL,
  I_PRICE FLOAT DEFAULT NULL,
  I_DATA VARCHAR(64) DEFAULT NULL,
  CONSTRAINT I_PK_ARRAY PRIMARY KEY (I_ID)
);

CREATE TABLE CUSTOMER (
  C_ID INTEGER DEFAULT '0' NOT NULL,
  C_D_ID INTEGER DEFAULT '0' NOT NULL,
  C_W_ID SMALLINT DEFAULT '0' NOT NULL,
  C_FIRST VARCHAR(32) DEFAULT NULL,
  C_MIDDLE VARCHAR(2) DEFAULT NULL,
  C_LAST VARCHAR(32) DEFAULT NULL,
  C_STREET_1 VARCHAR(32) DEFAULT NULL,
  C_STREET_2 VARCHAR(32) DEFAULT NULL,
  C_CITY VARCHAR(32) DEFAULT NULL,
  C_STATE VARCHAR(2) DEFAULT NULL,
  C_ZIP VARCHAR(9) DEFAULT NULL,
  C_PHONE VARCHAR(32) DEFAULT NULL,
  C_SINCE DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  C_CREDIT VARCHAR(2) DEFAULT NULL,
  C_CREDIT_LIM FLOAT DEFAULT NULL,
  C_DISCOUNT FLOAT DEFAULT NULL,
  C_BALANCE FLOAT DEFAULT NULL,
  C_YTD_PAYMENT FLOAT DEFAULT NULL,
  C_PAYMENT_CNT INTEGER DEFAULT NULL,
  C_DELIVERY_CNT INTEGER DEFAULT NULL,
  -- C_DATA VARCHAR(1000),
  C_DATA VARCHAR(500),
  PRIMARY KEY (C_W_ID,C_D_ID,C_ID),
  UNIQUE (C_W_ID,C_D_ID,C_LAST,C_FIRST)
  -- CONSTRAINT C_FKEY_D FOREIGN KEY (C_W_ID, C_D_ID) REFERENCES DISTRICT (D_W_ID, D_ID)
);
CREATE INDEX IDX_CUSTOMER ON CUSTOMER (C_W_ID,C_D_ID,C_LAST);

CREATE TABLE HISTORY (
  H_C_ID INTEGER DEFAULT NULL,
  H_C_D_ID INTEGER DEFAULT NULL,
  H_C_W_ID SMALLINT DEFAULT NULL,
  H_D_ID INTEGER DEFAULT NULL,
  H_W_ID SMALLINT DEFAULT '0' NOT NULL,
  H_DATE DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  H_AMOUNT FLOAT DEFAULT NULL,
  H_DATA VARCHAR(32) DEFAULT NULL
  -- CONSTRAINT H_FKEY_C FOREIGN KEY (H_C_W_ID, H_C_D_ID, H_C_ID) REFERENCES CUSTOMER (C_W_ID,C_D_ID,C_ID) ,
  -- CONSTRAINT H_FKEY_D FOREIGN KEY (H_W_ID, H_D_ID) REFERENCES DISTRICT (D_W_ID, D_ID)
);

CREATE TABLE STOCK (
  S_I_ID INTEGER DEFAULT '0' NOT NULL ,
  S_W_ID SMALLINT DEFAULT '0 ' NOT NULL ,
  S_QUANTITY INTEGER DEFAULT '0' NOT NULL,
  S_DIST_01 VARCHAR(32) DEFAULT NULL,
  S_DIST_02 VARCHAR(32) DEFAULT NULL,
  S_DIST_03 VARCHAR(32) DEFAULT NULL,
  S_DIST_04 VARCHAR(32) DEFAULT NULL,
  S_DIST_05 VARCHAR(32) DEFAULT NULL,
  S_DIST_06 VARCHAR(32) DEFAULT NULL,
  S_DIST_07 VARCHAR(32) DEFAULT NULL,
  S_DIST_08 VARCHAR(32) DEFAULT NULL,
  S_DIST_09 VARCHAR(32) DEFAULT NULL,
  S_DIST_10 VARCHAR(32) DEFAULT NULL,
  S_YTD INTEGER DEFAULT NULL,
  S_ORDER_CNT INTEGER DEFAULT NULL,
  S_REMOTE_CNT INTEGER DEFAULT NULL,
  S_DATA VARCHAR(64) DEFAULT NULL,
  PRIMARY KEY (S_W_ID,S_I_ID)
);

CREATE TABLE ORDERS (
  O_ID INTEGER DEFAULT '0' NOT NULL,
  O_C_ID INTEGER DEFAULT NULL,
  O_D_ID INTEGER DEFAULT '0' NOT NULL,
  O_W_ID SMALLINT DEFAULT '0' NOT NULL,
  O_ENTRY_D DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  O_CARRIER_ID INTEGER DEFAULT NULL,
  O_OL_CNT INTEGER DEFAULT NULL,
  O_ALL_LOCAL INTEGER DEFAULT NULL,
  PRIMARY KEY (O_W_ID,O_D_ID,O_ID),
  UNIQUE (O_W_ID,O_D_ID,O_C_ID,O_ID)
  -- CONSTRAINT O_FKEY_C FOREIGN KEY (O_W_ID, O_D_ID, O_C_ID) REFERENCES CUSTOMER (C_W_ID,C_D_ID,C_ID)
);
CREATE INDEX IDX_ORDERS ON ORDERS (O_W_ID,O_D_ID,O_C_ID);

CREATE TABLE NEW_ORDER (
  NO_O_ID INTEGER DEFAULT '0' NOT NULL,
  NO_D_ID INTEGER DEFAULT '0' NOT NULL,
  NO_W_ID SMALLINT DEFAULT '0' NOT NULL,
  CONSTRAINT NO_PK_TREE PRIMARY KEY (NO_D_ID,NO_W_ID,NO_O_ID)
  -- CONSTRAINT NO_FKEY_O FOREIGN KEY (NO_W_ID, NO_D_ID, NO_O_ID) REFERENCES ORDERS (O_W_ID,O_D_ID,O_ID)
);

CREATE TABLE ORDER_LINE (
  OL_O_ID INTEGER DEFAULT '0' NOT NULL,
  OL_D_ID INTEGER DEFAULT '0' NOT NULL,
  OL_W_ID SMALLINT DEFAULT '0' NOT NULL,
  OL_NUMBER INTEGER DEFAULT '0' NOT NULL,
  OL_I_ID INTEGER DEFAULT NULL,
  OL_SUPPLY_W_ID SMALLINT DEFAULT NULL,
  OL_DELIVERY_D DATE DEFAULT NULL,
  OL_QUANTITY INTEGER DEFAULT NULL,
  OL_AMOUNT FLOAT DEFAULT NULL,
  OL_DIST_INFO VARCHAR(32) DEFAULT NULL,
  PRIMARY KEY (OL_W_ID,OL_D_ID,OL_O_ID,OL_NUMBER)
  -- CONSTRAINT OL_FKEY_O FOREIGN KEY (OL_W_ID, OL_D_ID, OL_O_ID) REFERENCES ORDERS (O_W_ID, O_D_ID, O_ID )
  -- CONSTRAINT OL_FKEY_S FOREIGN KEY (OL_I_ID, OL_SUPPLY_W_ID) REFERENCES STOCK (S_I_ID, S_W_ID)
);
--CREATE INDEX IDX_ORDER_LINE_3COL ON ORDER_LINE (OL_W_ID,OL_D_ID,OL_O_ID);
--CREATE INDEX IDX_ORDER_LINE_2COL ON ORDER_LINE (OL_W_ID,OL_D_ID);
CREATE INDEX IDX_ORDER_LINE_TREE ON ORDER_LINE (OL_W_ID,OL_D_ID,OL_O_ID);


-- For altiproc driver 
CREATE OR REPLACE PROCEDURE DO_DELIVERY_PROCEDURE (
    IN_W_ID INTEGER,
    IN_O_CARRIER_ID INTEGER,
    IN_OL_DELIVERY_D DATE,
    IN_D_ID INTEGER,
    IN_C_ID INTEGER,
    IN_NO_O_ID INTEGER
)
IS
    V_OL_TOTAL FLOAT;
BEGIN
    -- 새 주문 삭제
    DELETE FROM NEW_ORDER WHERE NO_D_ID = IN_D_ID AND NO_W_ID = IN_W_ID AND NO_O_ID = IN_NO_O_ID;

    -- 주문 업데이트
    UPDATE ORDERS SET O_CARRIER_ID = IN_O_CARRIER_ID WHERE O_ID = IN_NO_O_ID AND O_D_ID = IN_D_ID AND O_W_ID = IN_W_ID;
    UPDATE ORDER_LINE SET OL_DELIVERY_D = IN_OL_DELIVERY_D WHERE OL_O_ID = IN_NO_O_ID AND OL_D_ID = IN_D_ID AND OL_W_ID = IN_W_ID;

    -- 총액 계산
    SELECT SUM(OL_AMOUNT) INTO V_OL_TOTAL FROM ORDER_LINE WHERE OL_O_ID = IN_NO_O_ID AND OL_D_ID = IN_D_ID AND OL_W_ID = IN_W_ID;

    -- 고객 정보 업데이트
    UPDATE CUSTOMER SET C_BALANCE = C_BALANCE + V_OL_TOTAL WHERE C_ID = IN_C_ID AND C_D_ID = IN_D_ID AND C_W_ID = IN_W_ID;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DO_NEW_ORDER_PROCEDURE (
    P_W_ID              IN INTEGER,
    P_D_ID              IN INTEGER,
    P_C_ID              IN INTEGER,
    P_O_ENTRY_D         IN DATE,
    P_OL_I_ID           IN INTEGER,
    P_OL_SUPPLY_W_ID    IN INTEGER,
    P_OL_QUANTITY       IN INTEGER,
    P_I_NAME            IN VARCHAR(32),
    P_I_DATA            IN VARCHAR(64),
    P_I_PRICE           IN FLOAT, 
    P_D_NEXT_O_ID       IN INTEGER,
    P_OL_NUMBER         IN INTEGER
)
IS
    v_sql_stmt      VARCHAR(4000);
    v_quantity      INTEGER;
    v_data          VARCHAR(64);
    v_ytd           INTEGER;
    v_order_cnt     INTEGER;
    v_remote_cnt    INTEGER;
    v_dist          VARCHAR(64);
    v_brand_generic CHAR(1);
    v_ol_amount     NUMBER(12, 2);
BEGIN
    -- 재고 정보 가져오기
    v_sql_stmt := 'SELECT S_QUANTITY, S_DATA, S_YTD, S_ORDER_CNT, S_REMOTE_CNT, ' ||
              'S_DIST_' || TO_CHAR(P_D_ID, '09') || ' ' ||
              'FROM STOCK WHERE S_I_ID = ? AND S_W_ID = ?';
    EXECUTE IMMEDIATE v_sql_stmt INTO v_quantity, v_data, v_ytd, v_order_cnt, v_remote_cnt, v_dist
                USING P_OL_I_ID, P_OL_SUPPLY_W_ID;
    -- norow일때 프로시저 정상종료

    -- 재고 업데이트
    v_ytd := v_ytd + P_OL_QUANTITY;
    IF v_quantity >= P_OL_QUANTITY + 10 THEN
        v_quantity := v_quantity - P_OL_QUANTITY;
    ELSE
        v_quantity := v_quantity + 91 - P_OL_QUANTITY;
    END IF;
    v_order_cnt := v_order_cnt + 1;
    
    IF P_OL_SUPPLY_W_ID != P_W_ID THEN
        v_remote_cnt := v_remote_cnt + 1;
    END IF;

    UPDATE STOCK
    SET S_QUANTITY = v_quantity, S_YTD = v_ytd, S_ORDER_CNT = v_order_cnt, S_REMOTE_CNT = v_remote_cnt
    WHERE S_I_ID = P_OL_I_ID AND S_W_ID = P_OL_SUPPLY_W_ID;

    -- 브랜드/제네릭 결정
    IF P_I_DATA LIKE '%ORIGINAL%' AND v_data LIKE '%ORIGINAL%' THEN
        v_brand_generic := 'B';
    ELSE
        v_brand_generic := 'G';
    END IF;

    -- 주문 라인 생성
    v_ol_amount := P_OL_QUANTITY * P_I_PRICE;
    
    INSERT INTO ORDER_LINE (OL_O_ID, OL_D_ID, OL_W_ID, OL_NUMBER, OL_I_ID, OL_SUPPLY_W_ID, OL_DELIVERY_D, OL_QUANTITY, OL_AMOUNT, OL_DIST_INFO)
    VALUES (P_D_NEXT_O_ID, P_D_ID, P_W_ID, P_OL_NUMBER, P_OL_I_ID, P_OL_SUPPLY_W_ID, P_O_ENTRY_D, P_OL_QUANTITY, v_ol_amount, v_dist);
     
END;
/